median.mean <- function (median, min, max) {
mean = (min + (2*median) + max)/4
return(mean)
}
##estimating sd from median and range
median.sd <- function (median, min, max) {
sd = sqrt(1/12*((min - (2*median) + max)^2)/4 + (max- min)^2)
return(sd)
}
## from median and range of two groups to cohen's d to r
median.r <- function (median1, median2, min1, max1, min2, max2, n1, n2) {
mean1 = median.mean(median1, min1, max1)
mean2 = median.mean(median2, min2, max2)
sd1 = median.sd(median1, min1, max1)
sd2 = median.sd(median2, min2, max2)
r = meansd.r(mean1, mean2, sd1, sd2, n1, n2)
return(r)
}
save.image ("/Users/phoebelam/Google Drive/chialam/stats resources/michaela/michaela.RData")
partial.r()
library (psych)
partial.r
solve
UseMethod
library (docextractr)
install.packages("docextractr")
library (docextractr)
install.packages("â€˜docxtractr")
install.packages("here")
library (dplyr)
read.csv("Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv")
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv")
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv") -> dat
colnames (dat)
View (dat)
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv") [3, ] -> dat
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv") [-2, ] -> dat
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv") [-2:3, ] -> dat
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv") [-c(2,3), ] -> dat
read.csv("/Users/phoebelam/Desktop/OTR V1 Shift & Persist Coding_March 26, 2020_10.46.csv") [-c(1,2), ] -> dat
dat %>% filter (coder == "johanna") %>% select (id, notes)
dat %>% filter (coder == "johanna") %>% select (id, notes) %>% View ()
dat %>% filter (coder == "johanna") %>% select (id, notes) -> forjo
colnames (dat)
dat %>% filter (coder == "johanna") %>% select (id, adjself:notes) -> forjo
write.csv(forjo, "week9_sap_codes_for jo.csv")
View (dat)
dat %>% select (id)
load("/Users/phoebelam/Google Drive/chialam/stats resources/metachores/metachores.RData")
reliability1(path = "/Users/phoebelam/Google Drive/2020/4_meta_els sleep & inflammation/1_search_els & sleep/reliability",
pattern = "1_merged els & sleep_11.1.19_ra_",
jc.filename = "0_merged els & sleep_11.1.19_jc.xlsx",
jc.sheetnumber = 2)
#### RELIABILITY FOR ELS AND SLEEP BATCH ONLY
reliability1 <- function(path,
jc.filename,
jc.sheetnumber,
pattern,
recode = F,
recode.ra = NULL) {
# jc <- read.xlsx("0_merged els & sleep_11.1.19_jc.xlsx", sheetName = "pubmed_result (2)")
# ra <- read.xlsx("reliability_ra screening/0_merged els & sleep_11.1.19_ra_kjk.xls", sheetIndex =1)
library (dplyr)
library (xlsx)
library (janitor)
library (stringr)
library (psych)
setwd(path)
jc <- read.xlsx("0_merged els & sleep_11.1.19_jc.xlsx", sheetName = "pubmed_result (2)")
#clean jc sheet
jc %>%
rename(jc = include...1.unsure...2) %>%
filter (duplicate != "duplicate") %>%
select(jc, Title) %>%
filter (is.na(Title)==F & Title != "Title") %>%
mutate (jc = case_when(is.na(jc)==T~ 0,
TRUE~jc),
rownumber = row_number()+1) -> jc
if (recode == T) {
jcrecode = list.files(path = path, pattern = "_recode", full.names = T, recursive = T)
recodedf <- read.xlsx(jcrecode, sheetIndex = 1)
#clean jc recoded sheet
recodedf %>%
rename (jc_1st_round = jc) %>%
mutate (jc = case_when(is.na(consensus)==F~ consensus,
is.na(jc_2nd_round)==F~ jc_2nd_round,
TRUE~ jc_1st_round)) %>%
select (jc, Title, rownumber) -> jcrecode
jc %>%
filter (!rownumber %in% jcrecode$rownumber) -> jcnorecode
rbind(jcnorecode, jcrecode) %>%
arrange (rownumber) -> jc
#special treatment for the particular ra with whom jc did recode
#remind jc not to have missing for the recode ra or if she okay with following assumption:
#empty pk 2nd round is due to discussion
#and going with jc so not penalizing her for discrepancies in those cells
#detect and rename colnames base on ra's name in input to generic "ra"
gsub(recode.ra, "ra", colnames(recodedf)) -> colnames (recodedf)
recodedf %>%
rename (jc_1st_round = jc,
ra_1st_round = ra) %>%
mutate (jc = case_when(is.na(consensus)==F~ consensus,
is.na(jc_2nd_round)==F~ jc_2nd_round,
TRUE~ jc_1st_round),
ra = case_when(is.na(consensus)==F~ consensus,
is.na(ra_2nd_round)==F~ra_2nd_round,
TRUE~ jc_1st_round)) -> recodedf
recodedf %>%
filter(jc != ra) %>%
select (rownumber, Title, jc, ra) %>%
arrange(jc, ra)-> trim
gsub("ra", recode.ra, colnames(trim)) -> colnames(trim)
write.xlsx(trim, paste("1_jc recode_", recode.ra, " recode_discrep_", format(Sys.Date(), format="%m.%d.%y"), ".xlsx", sep=""), row.names=F)
#summary sheet
# general, number of 0, 1, and 2 for both
# % and number discrepant discrepant between 0 vs. 1/2, 1 vs 2, and 0 vs. 2
tabyl (recodedf$jc) -> sumjc
tabyl (recodedf$ra) -> sumra
nrow(recodedf) -> total
recodedf %>%
filter (jc!=ra) %>% nrow() %>% paste(., "of discrepancies out of", total, "recoded entries", sep =" ") -> discreptot
recodedf %>%
filter(jc == 0 & ra == 1) %>% nrow() %>% paste(., "where jc = 0, ra = 1", sep =" ") -> jc0ra1
recodedf %>%
filter(jc == 0 & ra == 2) %>% nrow() %>% paste(., "where jc = 0, ra = 2", sep =" ") -> jc0ra2
recodedf %>%
filter(jc == 1 & ra == 0) %>% nrow() %>% paste(., "where jc = 1, ra = 0", sep =" ") -> jc1ra0
recodedf %>%
filter(jc == 1 & ra == 2) %>% nrow() %>% paste(., "where jc = 1, ra = 2", sep =" ") -> jc1ra2
recodedf %>%
filter(jc == 2 & ra == 0) %>% nrow() %>% paste(., "where jc = 2, ra = 0", sep =" ") -> jc2ra0
recodedf %>%
filter(jc == 2 & ra == 1) %>% nrow() %>% paste(., "where jc = 2, ra = 1", sep =" ") -> jc2ra1
list (sumjc, sumra, discreptot, jc0ra1, jc0ra2, jc1ra0, jc1ra2, jc2ra0, jc2ra1) -> summary
names(summary) <- c("number/% of 0,1,2 for jc", "number/% of 0,1,2 for ra", "number of discrepancies",
"jc0 ra1", "jc0 ra2", "jc1 ra0", "jc1 ra2", "jc2 ra0", "jc2 ra1")
capture.output(summary, file = paste("1_jc recode_", recode.ra, " recode_summary_", format(Sys.Date(), format="%m.%d.%y"), ".txt", sep=""))
}
filenames = intersect(list.files(path = path, pattern = pattern, full.names = TRUE, recursive = TRUE),
list.files(path = path, pattern = ".xlsx", full.names = TRUE, recursive = TRUE))
if (recode == T) {
filenames[!grepl(recode.ra, filenames, ignore.case=T)]
}
for (f in filenames) {
print (f)
#clean ra sheet
ra <- read.xlsx(f, sheetIndex =1)
ra %>% filter (duplicate != "duplicate") %>%
rename (ra = X1...include.2...unsure) %>%
select (ra, Title) %>%
filter (is.na(Title)==F & Title != "Title") %>%
mutate (ra = case_when(is.na(ra)==T~ 0,
TRUE~as.numeric(as.character(ra)))) -> ra
#merge
merge (jc, ra, by = "Title", all = TRUE) -> merge
#discrepancy sheet
merge %>%
filter (jc!=ra) %>%
select (rownumber, Title, jc, ra) %>%
arrange (jc, ra) -> trim
#grab initials
basename(f) %>%
str_sub(.,-8,-6) %>%
gsub("_", "", .) -> initial
colnames(trim) <- c("rownumber", "Title", "jc", initial)
View (trim)
if (recode == F){
write.xlsx(trim, paste("1_jc_", initial, "_discrep_", format(Sys.Date(), format="%m.%d.%y"), ".xlsx", sep=""), row.names=F)
} else {
write.xlsx(trim, paste("1_jc recode_", initial, "_discrep_", format(Sys.Date(), format="%m.%d.%y"), ".xlsx", sep=""), row.names=F)
}
#summary sheet
# general, number of 0, 1, and 2 for both
# % and number discrepant discrepant between 0 vs. 1/2, 1 vs 2, and 0 vs. 2
tabyl (merge$jc) -> sumjc
tabyl (merge$ra) -> sumra
nrow(merge) -> total
merge %>%
filter (jc!=ra) %>% nrow() %>% paste(., "of discrepancies out of", total, sep =" ") -> discreptot
merge %>%
filter(jc == 0 & ra == 1) %>% nrow() %>% paste(., "where jc = 0, ra = 1", sep =" ") -> jc0ra1
merge %>%
filter(jc == 0 & ra == 2) %>% nrow() %>% paste(., "where jc = 0, ra = 2", sep =" ") -> jc0ra2
merge %>%
filter(jc == 1 & ra == 0) %>% nrow() %>% paste(., "where jc = 1, ra = 0", sep =" ") -> jc1ra0
merge %>%
filter(jc == 1 & ra == 2) %>% nrow() %>% paste(., "where jc = 1, ra = 2", sep =" ") -> jc1ra2
merge %>%
filter(jc == 2 & ra == 0) %>% nrow() %>% paste(., "where jc = 2, ra = 0", sep =" ") -> jc2ra0
merge %>%
filter(jc == 2 & ra == 1) %>% nrow() %>% paste(., "where jc = 2, ra = 1", sep =" ") -> jc2ra1
list (sumjc, sumra, discreptot, jc0ra1, jc0ra2, jc1ra0, jc1ra2, jc2ra0, jc2ra1) -> summary
names(summary) <- c("number/% of 0,1,2 for jc", "number/% of 0,1,2 for ra", "number of discrepancies",
"jc0 ra1", "jc0 ra2", "jc1 ra0", "jc1 ra2", "jc2 ra0", "jc2 ra1")
if (recode == F){
capture.output(summary, file = paste("1_jc_", initial, "_summary_", format(Sys.Date(), format="%m.%d.%y"), ".txt", sep=""))
} else {
capture.output(summary, file = paste("1_jc recode_", initial, "_summary_", format(Sys.Date(), format="%m.%d.%y"), ".txt", sep=""))
}
print("donzo!")
}
load("/Users/phoebelam/Google Drive/chialam/stats resources/metachores/metachores.RData")
devtools::create("/Users/phoebelam/Google Drive/michaela")
devtools::create("michaela")
list.files("/Users/phoebelam/Google Drive", pattern = ".Rproj", recursive = T)
devtools::create('michaela')
getdir()
getwd()
list.files("/Users/phoebelam", pattern = ".Rproj", recursive = T)
usethis::create_package("michaela")
devtools::create("tester")
list.files(path = "/Users/phoebelam/Google Drive", pattern = ".Rproj", recursive = T)
devtools::create("tester")
getwd()
devtools::create("tester")
devtools::create("michaela")
usethis::create_package("michaela")
devtools::create("michaela")
install.packages("roxygen2")
usethis::create_package("michaela")
devtools::create("michaela")
devtools::create("tester")
devtools::create('tester')
devtools::create("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?r.z()
warnings
warnings()
?bci.r()
?r.z()
?t.r()
?bci.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?bci.r()
?bse.r()
ci.se()
?ci.se()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?ci.se()
?z.r()
?zvar()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?zvar()
?rsq.r()
?or.r()
?rsq.r()
?or.r()
?ci.se()
?or.r()
?ci.se()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?ci.se()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?ci.se()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?ci.se()
?se.diff()
?sediff()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?sediff()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?sediff()
?bse.t()
?t.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?bse.r()
?bci.r()
?expb.r()
?rr.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?percent.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?percent.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?percent.r()
?f.r()
?percent.r()
?regp.r()
?d.t()
## means and sds
# d = (m1-m2)/sqrt ((sd1^2+sd2^2)/2)
# r = d / sqrt (d^2 + a)
# a = ((n1 + n2)^2)/(n1*n2)
meansd.r <- function (m1, m2, sd1, sd2, n1, n2, k=0) {
d = (m1-m2)/sqrt ((sd1^2+sd2^2)/2)
t = d.t (d, n1, n2, k, 1) #direction always one, because the d already comes with sign
r = t.r(t, n1+n2, k, 1) #direction always one, because the d already comes with sign
return (r)
}
meansd.r(15.1, 13.2, 2.3, 1.1, 25, 45)
package?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
#' @param sd1 standard deviation of group 1
#' @param sd2 standard deviation of group 2
#' @param n1 cell size of group 1
#' @param n2 cell size of group 2
#'
#' @examples
#' meansd.d(15.1, 13.2, 2.3, 1.1, 25, 45)
#' dat %>% mutate (d_from_meansd = meansd.d(mean1, mean2, sd1, sd2, n1, n2)) -> dat
#'
#' @export
meansd.d(m1, m2, sd1, sd2, n1, n2) {
d = (m1-m2)/sqrt ((sd1^2+sd2^2)/2)
return(d)
}
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
package?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
package?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
package?michaela
library (dplyr)
package?dpylr
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
library (michaela)
meansd.r(13, 12, 1, 1, 10, 10)
package?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
package?michaela
?meansd.r()
help(package = "michaela")
package?michaela-package
help(package = "michaela")
vignette(package = michaela)
browseVignettes(package="michaela")
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?michaela
package?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
2.3/25
3.2/sqrt(25)
1.1/sqrt(45)
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?dicho.t.zvar()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?dicho.t.zvar()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?dicho.d.r()
?dicho.d.z()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?dicho.meanci.zvar()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?dicho.d.r()
?dicho.meanci.zvar()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
library(michaela)
?meansd.r()
?r.z()
?michaela
#' @param sd1 standard deviation of group 1
#' @param sd2 standard deviation of group 2
#' @param n1 cell size of group 1
#' @param n2 cell size of group 2
#'
#' @examples
#' meansd.r(15.1, 13.2, 2.3, 1.1, 25, 45)
#' dat %>% mutate (r_from_meansd = meansd.r(mean1, mean2, sd1, sd2, n1, n2)) -> dat
#'
#' @export
meansd.r <- function (m1, m2, sd1, sd2, n1, n2) {
d = meansd.d(m1, m2, sd1, sd2, n1, n2)
t = d.t (d, n1, n2, 1, 1) #direction always one, because the d already comes with sign
r = t.r(t, n1+n2, 1, 1) #direction always one, because the d already comes with sign
return (r)
}
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?meansd.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?meansd.r()
library (michaela)
?meansd.r()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
?meansd.r()
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/homebrewed/michaela")
library(michaela)
?meansd.r()
library (michaela)
?meansd.r()
?z.r()
?michaela()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela()
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
?michaela
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
library (michaela)
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/michaela")
library (devtools)
install_github("phoebehlam/michaela")
library (michaela)
?michaela
?bse.t()
install_github("phoebehlam/pecan")
library (pecan)
devtools::create("/Users/phoebelam/Desktop/test")
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/pecan")
install_github("phoebehlam/pecan")
install_github("phoebehlam/pecan", force = T)
library (pecan)
library(pecan)
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/pecan")
.onAttach <- function(libname,pkgname) {
packageStartupMessage('p  e  c  a  n  \nsomeone once roasted pecans for me n since then\nsomething tells me that pecans would become essential\nan essential previously oblivious to me\njust like her\njust like these functions')
}
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/pecan")
library(devtools)
install_github("phoebehlam/pecan")
library(pecan)
devtools::create("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/metachores")
devtools::document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/pecan")
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/pecan")
library(pecan)
library(devtools)
install_github("phoebehlam/pecan")
library(pecan)
devtools::install("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/metachores")
library(metachores)
devtools::install_github("phoebehlam/metachores")
install.packages("gridGraphics")
devtools::install_github("chialam18/metachores")
load(metachores)
devtools::install_github("chialam18/metachores")
load(metachores)
load("metachores")
getwd()
library(devtools)
document("Google Drive/chialam/stats resources/the kitchen/metachores")
?mergeclean()
document("Google Drive/chialam/stats resources/the kitchen/metachores")
?mergeclean()
?titlescreen1()
document("Google Drive/chialam/stats resources/the kitchen/metachores")
?mergeclean()
document("Google Drive/chialam/stats resources/the kitchen/metachores")
?titlescreen1()
document("Google Drive/chialam/stats resources/the kitchen/metachores")
?titlescreen1()
## code to prepare `DATASET` dataset goes here
setwd("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/metachores")
## code to prepare `DATASET` dataset goes here
setwd("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/metachores")
# start of a function
imonit <- c("  m e t a c h o r e s  |  i'm on it. take an eye break, okie?",
"  m e t a c h o r e s  |  i'm on it. have u been drinking water today?",
"  m e t a c h o r e s  |  i'm on it. go enjoy a banana in bed",
"  m e t a c h o r e s  |  i'm on it...while thinking of u ;)",
"  m e t a c h o r e s  |  ur beauty is distracting me, go take a break!",
"  m e t a c h o r e s  |  i'm on it. have u stretched today?",
"  m e t a c h o r e s  |  i'm on it. stop staring at me. me shy. go take a break!",
"  m e t a c h o r e s  |  i'm on it. go think about how u gunna compensate me for this...",
"  m e t a c h o r e s  |  i'm on it. aight. eyes off screen rn!",
"  m e t a c h o r e s  |  i'm on it. take a break! i'd be sad if them pretty eyes get hurt. what? yes, yes, robots can be sad too.")
usethis::use_data(imonit, internal = F, overwrite = T)
# end of a function
donzo <- c("  m e t a c h o r e s  |  donzo. have u taken eye breaks today yet?",
"  m e t a c h o r e s  |  donzo. i'm charging one jessie smile.",
"  m e t a c h o r e s  |  donzo. where's my reward? oh there u r ;)",
"  m e t a c h o r e s  |  donzo. hey hey i just saved u potentially hours of work, spare minutes of those to take a break!",
"  m e t a c h o r e s  |  donzo. u know i could have done it faster if u weren't staring at me this whole time.",
"  m e t a c h o r e s  |  donzo. don't forget to take care of ur eye, okie?",
"  m e t a c h o r e s  |  donzo. praise meeeeeeeeee",
"  m e t a c h o r e s  |  donzo. the things i do to get ur attention...")
usethis::use_data(donzo, internal = F, overwrite = T)
document("Google Drive/chialam/stats resources/the kitchen/metachores")
document("/Users/phoebelam/Google Drive/chialam/stats resources/the kitchen/metachores")
library(pecan)
install_github("chialam18/metachores")
library(metachores)
